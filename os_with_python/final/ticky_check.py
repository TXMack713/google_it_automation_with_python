#!/usr/bin/env python3

# Google IT Automation with Python - Interacting with the OS with Python, Log Analysis Using Regular Expressions

import re
import csv
import sys
import operator

# Error statistics script to count the number of error messages generated by the users

error_dict = {}
filename = sys.argv[1]

with open(filename, "r") as f:
    lines = f.readlines()
    for line in lines:
        regex = r"(ERROR[\w\s\W]*) "
        result = re.search(regex, line)
        if result is not None:
            # print(result.group().strip())
            error_dict[result.group().strip()] = error_dict.get(result.group().strip(), 0) + 1
f.close()

# print(error_dict)

error_stats = sorted(error_dict.items(), key=operator.itemgetter(1), reverse=True)

error_stats.insert(0, ('Error', 'Count'))

print(error_stats)

with open("error_message.csv", "w") as errors_csv:
    writer = csv.writer(errors_csv)
    writer.writerows(error_stats)

errors_csv.close()

# User statistics script to verify the amount of logs generated by each user

user_list = []
user_set = set()
user_dict = {}

with open(filename, "r") as f:
    lines = f.readlines()
    for line in lines:
        regex = r" \(([\w]*.?[\w]*\))"
        result = re.search(regex, line)
        if result is not None:
            user_set.add(result.group().strip())

    # Create a sorted list of all unique users
    for user in user_set:
        name_arr = [x for x in user]
        name_arr.pop(0)
        name_arr.pop()
        user_list.append("".join(name_arr))
    user_list.sort()

    for user in user_list:
        info_dict = {"INFO": 0}
        error_dict = {"ERROR": 0}
        for line in lines:
            info_regex = r"INFO[\w\s\W.]*\([\w]*.?[\w]*\)"
            info_result = re.search(info_regex, line)
            if info_result is not None:
                this_line = info_result.group().strip()
                if this_line.find(user) != -1:
                    info_dict["INFO"] = info_dict.get("INFO", 0) + 1
            error_regex = r"ERROR[\w\s\W]*\([\w]*.?[\w]*\)"
            error_result = re.search(error_regex, line)
            if error_result is not None:
                this_line = error_result.group().strip()
                if this_line.find(user) != -1:
                    error_dict["ERROR"] = error_dict.get("ERROR", 0) + 1
        user_dict[user] = (user, info_dict['INFO'], error_dict['ERROR'])

f.close()

# print(user_dict)

user_stats = sorted(user_dict.values(), key=operator.itemgetter(0), reverse=False)

user_stats.insert(0, ('Username', 'INFO', 'ERROR'))

print(user_stats)

with open("user_statistics.csv", "w") as users_csv:
    writer = csv.writer(users_csv)
    writer.writerows(user_stats)

users_csv.close()
