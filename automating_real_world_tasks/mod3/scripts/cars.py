#!/usr/bin/env python3

# Google IT Automation with Python
# Automating Real-World Tasks with Python
# Module 3 - Qwiklabs Assessment: Automatically Generate a PDF and sending it by E-mail
'''
Optional challenge
As optional challenges, you could try some of the following functionalities:

Sort the list of cars in the PDF by total sales.
Create a pie chart for the total sales of each car made.
Create a bar chart showing total sales for the top 10 best selling vehicles using the ReportLab Diagra library. Put the vehicle name on the X-axis and total revenue (remember, price * total sales!) along the Y-axis.
'''

import json
import locale
import sys
# import reports
import emails
import os


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  yearly_sales = {}
  max_year = 0
  max_year_total = 0

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales["total_sales"] = item["total_sales"]
      max_sales = item
    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in yearly_sales:
      yearly_sales[item["car"]["car_year"]] = item["total_sales"]
    else:
      yearly_sales[item["car"]["car_year"]] += item["total_sales"]

  for key in yearly_sales:
    if yearly_sales[key] > max_year_total:
      max_year_total = yearly_sales[key]
      max_year = key

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),"<br/>",
    "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),"<br/>",
    "The most popular year was {} with {} sales".format(max_year, max_year_total)
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  # os.chdir("cd..")
  print(os.getcwd())
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  text_summary = ""
  for item in summary:
    text_summary += item + "<br/>"
  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", text_summary, table_data)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com" # sender was previously sender@example.com
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "Hi\n\nI'm sending an attachment with the same summary as the attached PDF."
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
